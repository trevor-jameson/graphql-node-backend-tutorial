// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  character: (where?: CharacterWhereInput) => Promise<boolean>;
  spell: (where?: SpellWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  character: (where: CharacterWhereUniqueInput) => CharacterNullablePromise;
  characters: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Character>;
  charactersConnection: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CharacterConnectionPromise;
  spell: (where: SpellWhereUniqueInput) => SpellNullablePromise;
  spells: (args?: {
    where?: SpellWhereInput;
    orderBy?: SpellOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Spell>;
  spellsConnection: (args?: {
    where?: SpellWhereInput;
    orderBy?: SpellOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SpellConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCharacter: (data: CharacterCreateInput) => CharacterPromise;
  updateCharacter: (args: {
    data: CharacterUpdateInput;
    where: CharacterWhereUniqueInput;
  }) => CharacterPromise;
  updateManyCharacters: (args: {
    data: CharacterUpdateManyMutationInput;
    where?: CharacterWhereInput;
  }) => BatchPayloadPromise;
  upsertCharacter: (args: {
    where: CharacterWhereUniqueInput;
    create: CharacterCreateInput;
    update: CharacterUpdateInput;
  }) => CharacterPromise;
  deleteCharacter: (where: CharacterWhereUniqueInput) => CharacterPromise;
  deleteManyCharacters: (where?: CharacterWhereInput) => BatchPayloadPromise;
  createSpell: (data: SpellCreateInput) => SpellPromise;
  updateSpell: (args: {
    data: SpellUpdateInput;
    where: SpellWhereUniqueInput;
  }) => SpellPromise;
  updateManySpells: (args: {
    data: SpellUpdateManyMutationInput;
    where?: SpellWhereInput;
  }) => BatchPayloadPromise;
  upsertSpell: (args: {
    where: SpellWhereUniqueInput;
    create: SpellCreateInput;
    update: SpellUpdateInput;
  }) => SpellPromise;
  deleteSpell: (where: SpellWhereUniqueInput) => SpellPromise;
  deleteManySpells: (where?: SpellWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  character: (
    where?: CharacterSubscriptionWhereInput
  ) => CharacterSubscriptionPayloadSubscription;
  spell: (
    where?: SpellSubscriptionWhereInput
  ) => SpellSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CharacterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SpellOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "api5eId_ASC"
  | "api5eId_DESC"
  | "api5eIndex_ASC"
  | "api5eIndex_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "highLevel_ASC"
  | "highLevel_DESC"
  | "page_ASC"
  | "page_DESC"
  | "range_ASC"
  | "range_DESC"
  | "components_ASC"
  | "components_DESC"
  | "ritual_ASC"
  | "ritual_DESC"
  | "concentration_ASC"
  | "concentration_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "castingTime_ASC"
  | "castingTime_DESC"
  | "material_ASC"
  | "material_DESC"
  | "level_ASC"
  | "level_DESC"
  | "school_ASC"
  | "school_DESC"
  | "klasses_ASC"
  | "klasses_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "avatarUrl_ASC"
  | "avatarUrl_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CharacterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CharacterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  spells_every?: Maybe<SpellWhereInput>;
  spells_some?: Maybe<SpellWhereInput>;
  spells_none?: Maybe<SpellWhereInput>;
  AND?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  OR?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  NOT?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  avatarUrl?: Maybe<String>;
  avatarUrl_not?: Maybe<String>;
  avatarUrl_in?: Maybe<String[] | String>;
  avatarUrl_not_in?: Maybe<String[] | String>;
  avatarUrl_lt?: Maybe<String>;
  avatarUrl_lte?: Maybe<String>;
  avatarUrl_gt?: Maybe<String>;
  avatarUrl_gte?: Maybe<String>;
  avatarUrl_contains?: Maybe<String>;
  avatarUrl_not_contains?: Maybe<String>;
  avatarUrl_starts_with?: Maybe<String>;
  avatarUrl_not_starts_with?: Maybe<String>;
  avatarUrl_ends_with?: Maybe<String>;
  avatarUrl_not_ends_with?: Maybe<String>;
  characters_every?: Maybe<CharacterWhereInput>;
  characters_some?: Maybe<CharacterWhereInput>;
  characters_none?: Maybe<CharacterWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SpellWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  api5eId?: Maybe<String>;
  api5eId_not?: Maybe<String>;
  api5eId_in?: Maybe<String[] | String>;
  api5eId_not_in?: Maybe<String[] | String>;
  api5eId_lt?: Maybe<String>;
  api5eId_lte?: Maybe<String>;
  api5eId_gt?: Maybe<String>;
  api5eId_gte?: Maybe<String>;
  api5eId_contains?: Maybe<String>;
  api5eId_not_contains?: Maybe<String>;
  api5eId_starts_with?: Maybe<String>;
  api5eId_not_starts_with?: Maybe<String>;
  api5eId_ends_with?: Maybe<String>;
  api5eId_not_ends_with?: Maybe<String>;
  api5eIndex?: Maybe<String>;
  api5eIndex_not?: Maybe<String>;
  api5eIndex_in?: Maybe<String[] | String>;
  api5eIndex_not_in?: Maybe<String[] | String>;
  api5eIndex_lt?: Maybe<String>;
  api5eIndex_lte?: Maybe<String>;
  api5eIndex_gt?: Maybe<String>;
  api5eIndex_gte?: Maybe<String>;
  api5eIndex_contains?: Maybe<String>;
  api5eIndex_not_contains?: Maybe<String>;
  api5eIndex_starts_with?: Maybe<String>;
  api5eIndex_not_starts_with?: Maybe<String>;
  api5eIndex_ends_with?: Maybe<String>;
  api5eIndex_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  highLevel?: Maybe<String>;
  highLevel_not?: Maybe<String>;
  highLevel_in?: Maybe<String[] | String>;
  highLevel_not_in?: Maybe<String[] | String>;
  highLevel_lt?: Maybe<String>;
  highLevel_lte?: Maybe<String>;
  highLevel_gt?: Maybe<String>;
  highLevel_gte?: Maybe<String>;
  highLevel_contains?: Maybe<String>;
  highLevel_not_contains?: Maybe<String>;
  highLevel_starts_with?: Maybe<String>;
  highLevel_not_starts_with?: Maybe<String>;
  highLevel_ends_with?: Maybe<String>;
  highLevel_not_ends_with?: Maybe<String>;
  page?: Maybe<String>;
  page_not?: Maybe<String>;
  page_in?: Maybe<String[] | String>;
  page_not_in?: Maybe<String[] | String>;
  page_lt?: Maybe<String>;
  page_lte?: Maybe<String>;
  page_gt?: Maybe<String>;
  page_gte?: Maybe<String>;
  page_contains?: Maybe<String>;
  page_not_contains?: Maybe<String>;
  page_starts_with?: Maybe<String>;
  page_not_starts_with?: Maybe<String>;
  page_ends_with?: Maybe<String>;
  page_not_ends_with?: Maybe<String>;
  range?: Maybe<String>;
  range_not?: Maybe<String>;
  range_in?: Maybe<String[] | String>;
  range_not_in?: Maybe<String[] | String>;
  range_lt?: Maybe<String>;
  range_lte?: Maybe<String>;
  range_gt?: Maybe<String>;
  range_gte?: Maybe<String>;
  range_contains?: Maybe<String>;
  range_not_contains?: Maybe<String>;
  range_starts_with?: Maybe<String>;
  range_not_starts_with?: Maybe<String>;
  range_ends_with?: Maybe<String>;
  range_not_ends_with?: Maybe<String>;
  components?: Maybe<String>;
  components_not?: Maybe<String>;
  components_in?: Maybe<String[] | String>;
  components_not_in?: Maybe<String[] | String>;
  components_lt?: Maybe<String>;
  components_lte?: Maybe<String>;
  components_gt?: Maybe<String>;
  components_gte?: Maybe<String>;
  components_contains?: Maybe<String>;
  components_not_contains?: Maybe<String>;
  components_starts_with?: Maybe<String>;
  components_not_starts_with?: Maybe<String>;
  components_ends_with?: Maybe<String>;
  components_not_ends_with?: Maybe<String>;
  ritual?: Maybe<Boolean>;
  ritual_not?: Maybe<Boolean>;
  concentration?: Maybe<Boolean>;
  concentration_not?: Maybe<Boolean>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  castingTime?: Maybe<String>;
  castingTime_not?: Maybe<String>;
  castingTime_in?: Maybe<String[] | String>;
  castingTime_not_in?: Maybe<String[] | String>;
  castingTime_lt?: Maybe<String>;
  castingTime_lte?: Maybe<String>;
  castingTime_gt?: Maybe<String>;
  castingTime_gte?: Maybe<String>;
  castingTime_contains?: Maybe<String>;
  castingTime_not_contains?: Maybe<String>;
  castingTime_starts_with?: Maybe<String>;
  castingTime_not_starts_with?: Maybe<String>;
  castingTime_ends_with?: Maybe<String>;
  castingTime_not_ends_with?: Maybe<String>;
  material?: Maybe<String>;
  material_not?: Maybe<String>;
  material_in?: Maybe<String[] | String>;
  material_not_in?: Maybe<String[] | String>;
  material_lt?: Maybe<String>;
  material_lte?: Maybe<String>;
  material_gt?: Maybe<String>;
  material_gte?: Maybe<String>;
  material_contains?: Maybe<String>;
  material_not_contains?: Maybe<String>;
  material_starts_with?: Maybe<String>;
  material_not_starts_with?: Maybe<String>;
  material_ends_with?: Maybe<String>;
  material_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  school?: Maybe<String>;
  school_not?: Maybe<String>;
  school_in?: Maybe<String[] | String>;
  school_not_in?: Maybe<String[] | String>;
  school_lt?: Maybe<String>;
  school_lte?: Maybe<String>;
  school_gt?: Maybe<String>;
  school_gte?: Maybe<String>;
  school_contains?: Maybe<String>;
  school_not_contains?: Maybe<String>;
  school_starts_with?: Maybe<String>;
  school_not_starts_with?: Maybe<String>;
  school_ends_with?: Maybe<String>;
  school_not_ends_with?: Maybe<String>;
  klasses?: Maybe<String>;
  klasses_not?: Maybe<String>;
  klasses_in?: Maybe<String[] | String>;
  klasses_not_in?: Maybe<String[] | String>;
  klasses_lt?: Maybe<String>;
  klasses_lte?: Maybe<String>;
  klasses_gt?: Maybe<String>;
  klasses_gte?: Maybe<String>;
  klasses_contains?: Maybe<String>;
  klasses_not_contains?: Maybe<String>;
  klasses_starts_with?: Maybe<String>;
  klasses_not_starts_with?: Maybe<String>;
  klasses_ends_with?: Maybe<String>;
  klasses_not_ends_with?: Maybe<String>;
  AND?: Maybe<SpellWhereInput[] | SpellWhereInput>;
  OR?: Maybe<SpellWhereInput[] | SpellWhereInput>;
  NOT?: Maybe<SpellWhereInput[] | SpellWhereInput>;
}

export type SpellWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface CharacterCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  user: UserCreateOneWithoutCharactersInput;
  spells?: Maybe<SpellCreateManyInput>;
}

export interface UserCreateOneWithoutCharactersInput {
  create?: Maybe<UserCreateWithoutCharactersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCharactersInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  avatarUrl?: Maybe<String>;
}

export interface SpellCreateManyInput {
  create?: Maybe<SpellCreateInput[] | SpellCreateInput>;
  connect?: Maybe<SpellWhereUniqueInput[] | SpellWhereUniqueInput>;
}

export interface SpellCreateInput {
  id?: Maybe<ID_Input>;
  api5eId: String;
  api5eIndex: String;
  name: String;
  description: String;
  highLevel: String;
  page: String;
  range: String;
  components: String;
  ritual: Boolean;
  concentration: Boolean;
  duration: String;
  castingTime: String;
  material: String;
  level: Int;
  school: String;
  klasses: String;
}

export interface CharacterUpdateInput {
  name?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCharactersInput>;
  spells?: Maybe<SpellUpdateManyInput>;
}

export interface UserUpdateOneRequiredWithoutCharactersInput {
  create?: Maybe<UserCreateWithoutCharactersInput>;
  update?: Maybe<UserUpdateWithoutCharactersDataInput>;
  upsert?: Maybe<UserUpsertWithoutCharactersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCharactersDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  avatarUrl?: Maybe<String>;
}

export interface UserUpsertWithoutCharactersInput {
  update: UserUpdateWithoutCharactersDataInput;
  create: UserCreateWithoutCharactersInput;
}

export interface SpellUpdateManyInput {
  create?: Maybe<SpellCreateInput[] | SpellCreateInput>;
  update?: Maybe<
    | SpellUpdateWithWhereUniqueNestedInput[]
    | SpellUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SpellUpsertWithWhereUniqueNestedInput[]
    | SpellUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SpellWhereUniqueInput[] | SpellWhereUniqueInput>;
  connect?: Maybe<SpellWhereUniqueInput[] | SpellWhereUniqueInput>;
  set?: Maybe<SpellWhereUniqueInput[] | SpellWhereUniqueInput>;
  disconnect?: Maybe<SpellWhereUniqueInput[] | SpellWhereUniqueInput>;
  deleteMany?: Maybe<SpellScalarWhereInput[] | SpellScalarWhereInput>;
  updateMany?: Maybe<
    SpellUpdateManyWithWhereNestedInput[] | SpellUpdateManyWithWhereNestedInput
  >;
}

export interface SpellUpdateWithWhereUniqueNestedInput {
  where: SpellWhereUniqueInput;
  data: SpellUpdateDataInput;
}

export interface SpellUpdateDataInput {
  api5eId?: Maybe<String>;
  api5eIndex?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  highLevel?: Maybe<String>;
  page?: Maybe<String>;
  range?: Maybe<String>;
  components?: Maybe<String>;
  ritual?: Maybe<Boolean>;
  concentration?: Maybe<Boolean>;
  duration?: Maybe<String>;
  castingTime?: Maybe<String>;
  material?: Maybe<String>;
  level?: Maybe<Int>;
  school?: Maybe<String>;
  klasses?: Maybe<String>;
}

export interface SpellUpsertWithWhereUniqueNestedInput {
  where: SpellWhereUniqueInput;
  update: SpellUpdateDataInput;
  create: SpellCreateInput;
}

export interface SpellScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  api5eId?: Maybe<String>;
  api5eId_not?: Maybe<String>;
  api5eId_in?: Maybe<String[] | String>;
  api5eId_not_in?: Maybe<String[] | String>;
  api5eId_lt?: Maybe<String>;
  api5eId_lte?: Maybe<String>;
  api5eId_gt?: Maybe<String>;
  api5eId_gte?: Maybe<String>;
  api5eId_contains?: Maybe<String>;
  api5eId_not_contains?: Maybe<String>;
  api5eId_starts_with?: Maybe<String>;
  api5eId_not_starts_with?: Maybe<String>;
  api5eId_ends_with?: Maybe<String>;
  api5eId_not_ends_with?: Maybe<String>;
  api5eIndex?: Maybe<String>;
  api5eIndex_not?: Maybe<String>;
  api5eIndex_in?: Maybe<String[] | String>;
  api5eIndex_not_in?: Maybe<String[] | String>;
  api5eIndex_lt?: Maybe<String>;
  api5eIndex_lte?: Maybe<String>;
  api5eIndex_gt?: Maybe<String>;
  api5eIndex_gte?: Maybe<String>;
  api5eIndex_contains?: Maybe<String>;
  api5eIndex_not_contains?: Maybe<String>;
  api5eIndex_starts_with?: Maybe<String>;
  api5eIndex_not_starts_with?: Maybe<String>;
  api5eIndex_ends_with?: Maybe<String>;
  api5eIndex_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  highLevel?: Maybe<String>;
  highLevel_not?: Maybe<String>;
  highLevel_in?: Maybe<String[] | String>;
  highLevel_not_in?: Maybe<String[] | String>;
  highLevel_lt?: Maybe<String>;
  highLevel_lte?: Maybe<String>;
  highLevel_gt?: Maybe<String>;
  highLevel_gte?: Maybe<String>;
  highLevel_contains?: Maybe<String>;
  highLevel_not_contains?: Maybe<String>;
  highLevel_starts_with?: Maybe<String>;
  highLevel_not_starts_with?: Maybe<String>;
  highLevel_ends_with?: Maybe<String>;
  highLevel_not_ends_with?: Maybe<String>;
  page?: Maybe<String>;
  page_not?: Maybe<String>;
  page_in?: Maybe<String[] | String>;
  page_not_in?: Maybe<String[] | String>;
  page_lt?: Maybe<String>;
  page_lte?: Maybe<String>;
  page_gt?: Maybe<String>;
  page_gte?: Maybe<String>;
  page_contains?: Maybe<String>;
  page_not_contains?: Maybe<String>;
  page_starts_with?: Maybe<String>;
  page_not_starts_with?: Maybe<String>;
  page_ends_with?: Maybe<String>;
  page_not_ends_with?: Maybe<String>;
  range?: Maybe<String>;
  range_not?: Maybe<String>;
  range_in?: Maybe<String[] | String>;
  range_not_in?: Maybe<String[] | String>;
  range_lt?: Maybe<String>;
  range_lte?: Maybe<String>;
  range_gt?: Maybe<String>;
  range_gte?: Maybe<String>;
  range_contains?: Maybe<String>;
  range_not_contains?: Maybe<String>;
  range_starts_with?: Maybe<String>;
  range_not_starts_with?: Maybe<String>;
  range_ends_with?: Maybe<String>;
  range_not_ends_with?: Maybe<String>;
  components?: Maybe<String>;
  components_not?: Maybe<String>;
  components_in?: Maybe<String[] | String>;
  components_not_in?: Maybe<String[] | String>;
  components_lt?: Maybe<String>;
  components_lte?: Maybe<String>;
  components_gt?: Maybe<String>;
  components_gte?: Maybe<String>;
  components_contains?: Maybe<String>;
  components_not_contains?: Maybe<String>;
  components_starts_with?: Maybe<String>;
  components_not_starts_with?: Maybe<String>;
  components_ends_with?: Maybe<String>;
  components_not_ends_with?: Maybe<String>;
  ritual?: Maybe<Boolean>;
  ritual_not?: Maybe<Boolean>;
  concentration?: Maybe<Boolean>;
  concentration_not?: Maybe<Boolean>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  castingTime?: Maybe<String>;
  castingTime_not?: Maybe<String>;
  castingTime_in?: Maybe<String[] | String>;
  castingTime_not_in?: Maybe<String[] | String>;
  castingTime_lt?: Maybe<String>;
  castingTime_lte?: Maybe<String>;
  castingTime_gt?: Maybe<String>;
  castingTime_gte?: Maybe<String>;
  castingTime_contains?: Maybe<String>;
  castingTime_not_contains?: Maybe<String>;
  castingTime_starts_with?: Maybe<String>;
  castingTime_not_starts_with?: Maybe<String>;
  castingTime_ends_with?: Maybe<String>;
  castingTime_not_ends_with?: Maybe<String>;
  material?: Maybe<String>;
  material_not?: Maybe<String>;
  material_in?: Maybe<String[] | String>;
  material_not_in?: Maybe<String[] | String>;
  material_lt?: Maybe<String>;
  material_lte?: Maybe<String>;
  material_gt?: Maybe<String>;
  material_gte?: Maybe<String>;
  material_contains?: Maybe<String>;
  material_not_contains?: Maybe<String>;
  material_starts_with?: Maybe<String>;
  material_not_starts_with?: Maybe<String>;
  material_ends_with?: Maybe<String>;
  material_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  school?: Maybe<String>;
  school_not?: Maybe<String>;
  school_in?: Maybe<String[] | String>;
  school_not_in?: Maybe<String[] | String>;
  school_lt?: Maybe<String>;
  school_lte?: Maybe<String>;
  school_gt?: Maybe<String>;
  school_gte?: Maybe<String>;
  school_contains?: Maybe<String>;
  school_not_contains?: Maybe<String>;
  school_starts_with?: Maybe<String>;
  school_not_starts_with?: Maybe<String>;
  school_ends_with?: Maybe<String>;
  school_not_ends_with?: Maybe<String>;
  klasses?: Maybe<String>;
  klasses_not?: Maybe<String>;
  klasses_in?: Maybe<String[] | String>;
  klasses_not_in?: Maybe<String[] | String>;
  klasses_lt?: Maybe<String>;
  klasses_lte?: Maybe<String>;
  klasses_gt?: Maybe<String>;
  klasses_gte?: Maybe<String>;
  klasses_contains?: Maybe<String>;
  klasses_not_contains?: Maybe<String>;
  klasses_starts_with?: Maybe<String>;
  klasses_not_starts_with?: Maybe<String>;
  klasses_ends_with?: Maybe<String>;
  klasses_not_ends_with?: Maybe<String>;
  AND?: Maybe<SpellScalarWhereInput[] | SpellScalarWhereInput>;
  OR?: Maybe<SpellScalarWhereInput[] | SpellScalarWhereInput>;
  NOT?: Maybe<SpellScalarWhereInput[] | SpellScalarWhereInput>;
}

export interface SpellUpdateManyWithWhereNestedInput {
  where: SpellScalarWhereInput;
  data: SpellUpdateManyDataInput;
}

export interface SpellUpdateManyDataInput {
  api5eId?: Maybe<String>;
  api5eIndex?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  highLevel?: Maybe<String>;
  page?: Maybe<String>;
  range?: Maybe<String>;
  components?: Maybe<String>;
  ritual?: Maybe<Boolean>;
  concentration?: Maybe<Boolean>;
  duration?: Maybe<String>;
  castingTime?: Maybe<String>;
  material?: Maybe<String>;
  level?: Maybe<Int>;
  school?: Maybe<String>;
  klasses?: Maybe<String>;
}

export interface CharacterUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SpellUpdateInput {
  api5eId?: Maybe<String>;
  api5eIndex?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  highLevel?: Maybe<String>;
  page?: Maybe<String>;
  range?: Maybe<String>;
  components?: Maybe<String>;
  ritual?: Maybe<Boolean>;
  concentration?: Maybe<Boolean>;
  duration?: Maybe<String>;
  castingTime?: Maybe<String>;
  material?: Maybe<String>;
  level?: Maybe<Int>;
  school?: Maybe<String>;
  klasses?: Maybe<String>;
}

export interface SpellUpdateManyMutationInput {
  api5eId?: Maybe<String>;
  api5eIndex?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  highLevel?: Maybe<String>;
  page?: Maybe<String>;
  range?: Maybe<String>;
  components?: Maybe<String>;
  ritual?: Maybe<Boolean>;
  concentration?: Maybe<Boolean>;
  duration?: Maybe<String>;
  castingTime?: Maybe<String>;
  material?: Maybe<String>;
  level?: Maybe<Int>;
  school?: Maybe<String>;
  klasses?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  avatarUrl?: Maybe<String>;
  characters?: Maybe<CharacterCreateManyWithoutUserInput>;
}

export interface CharacterCreateManyWithoutUserInput {
  create?: Maybe<
    CharacterCreateWithoutUserInput[] | CharacterCreateWithoutUserInput
  >;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
}

export interface CharacterCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  spells?: Maybe<SpellCreateManyInput>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  avatarUrl?: Maybe<String>;
  characters?: Maybe<CharacterUpdateManyWithoutUserInput>;
}

export interface CharacterUpdateManyWithoutUserInput {
  create?: Maybe<
    CharacterCreateWithoutUserInput[] | CharacterCreateWithoutUserInput
  >;
  delete?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  set?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  disconnect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  update?: Maybe<
    | CharacterUpdateWithWhereUniqueWithoutUserInput[]
    | CharacterUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CharacterUpsertWithWhereUniqueWithoutUserInput[]
    | CharacterUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  updateMany?: Maybe<
    | CharacterUpdateManyWithWhereNestedInput[]
    | CharacterUpdateManyWithWhereNestedInput
  >;
}

export interface CharacterUpdateWithWhereUniqueWithoutUserInput {
  where: CharacterWhereUniqueInput;
  data: CharacterUpdateWithoutUserDataInput;
}

export interface CharacterUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  spells?: Maybe<SpellUpdateManyInput>;
}

export interface CharacterUpsertWithWhereUniqueWithoutUserInput {
  where: CharacterWhereUniqueInput;
  update: CharacterUpdateWithoutUserDataInput;
  create: CharacterCreateWithoutUserInput;
}

export interface CharacterScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  OR?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  NOT?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
}

export interface CharacterUpdateManyWithWhereNestedInput {
  where: CharacterScalarWhereInput;
  data: CharacterUpdateManyDataInput;
}

export interface CharacterUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  avatarUrl?: Maybe<String>;
}

export interface CharacterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CharacterWhereInput>;
  AND?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  OR?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
}

export interface SpellSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SpellWhereInput>;
  AND?: Maybe<SpellSubscriptionWhereInput[] | SpellSubscriptionWhereInput>;
  OR?: Maybe<SpellSubscriptionWhereInput[] | SpellSubscriptionWhereInput>;
  NOT?: Maybe<SpellSubscriptionWhereInput[] | SpellSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Character {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
}

export interface CharacterPromise extends Promise<Character>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  spells: <T = FragmentableArray<Spell>>(args?: {
    where?: SpellWhereInput;
    orderBy?: SpellOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CharacterSubscription
  extends Promise<AsyncIterator<Character>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  spells: <T = Promise<AsyncIterator<SpellSubscription>>>(args?: {
    where?: SpellWhereInput;
    orderBy?: SpellOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CharacterNullablePromise
  extends Promise<Character | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  spells: <T = FragmentableArray<Spell>>(args?: {
    where?: SpellWhereInput;
    orderBy?: SpellOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  password: String;
  avatarUrl?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  characters: <T = Promise<AsyncIterator<CharacterSubscription>>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Spell {
  id: ID_Output;
  api5eId: String;
  api5eIndex: String;
  name: String;
  description: String;
  highLevel: String;
  page: String;
  range: String;
  components: String;
  ritual: Boolean;
  concentration: Boolean;
  duration: String;
  castingTime: String;
  material: String;
  level: Int;
  school: String;
  klasses: String;
}

export interface SpellPromise extends Promise<Spell>, Fragmentable {
  id: () => Promise<ID_Output>;
  api5eId: () => Promise<String>;
  api5eIndex: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  highLevel: () => Promise<String>;
  page: () => Promise<String>;
  range: () => Promise<String>;
  components: () => Promise<String>;
  ritual: () => Promise<Boolean>;
  concentration: () => Promise<Boolean>;
  duration: () => Promise<String>;
  castingTime: () => Promise<String>;
  material: () => Promise<String>;
  level: () => Promise<Int>;
  school: () => Promise<String>;
  klasses: () => Promise<String>;
}

export interface SpellSubscription
  extends Promise<AsyncIterator<Spell>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  api5eId: () => Promise<AsyncIterator<String>>;
  api5eIndex: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  highLevel: () => Promise<AsyncIterator<String>>;
  page: () => Promise<AsyncIterator<String>>;
  range: () => Promise<AsyncIterator<String>>;
  components: () => Promise<AsyncIterator<String>>;
  ritual: () => Promise<AsyncIterator<Boolean>>;
  concentration: () => Promise<AsyncIterator<Boolean>>;
  duration: () => Promise<AsyncIterator<String>>;
  castingTime: () => Promise<AsyncIterator<String>>;
  material: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  school: () => Promise<AsyncIterator<String>>;
  klasses: () => Promise<AsyncIterator<String>>;
}

export interface SpellNullablePromise
  extends Promise<Spell | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  api5eId: () => Promise<String>;
  api5eIndex: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  highLevel: () => Promise<String>;
  page: () => Promise<String>;
  range: () => Promise<String>;
  components: () => Promise<String>;
  ritual: () => Promise<Boolean>;
  concentration: () => Promise<Boolean>;
  duration: () => Promise<String>;
  castingTime: () => Promise<String>;
  material: () => Promise<String>;
  level: () => Promise<Int>;
  school: () => Promise<String>;
  klasses: () => Promise<String>;
}

export interface CharacterConnection {
  pageInfo: PageInfo;
  edges: CharacterEdge[];
}

export interface CharacterConnectionPromise
  extends Promise<CharacterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CharacterEdge>>() => T;
  aggregate: <T = AggregateCharacterPromise>() => T;
}

export interface CharacterConnectionSubscription
  extends Promise<AsyncIterator<CharacterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CharacterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCharacterSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CharacterEdge {
  node: Character;
  cursor: String;
}

export interface CharacterEdgePromise
  extends Promise<CharacterEdge>,
    Fragmentable {
  node: <T = CharacterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CharacterEdgeSubscription
  extends Promise<AsyncIterator<CharacterEdge>>,
    Fragmentable {
  node: <T = CharacterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCharacter {
  count: Int;
}

export interface AggregateCharacterPromise
  extends Promise<AggregateCharacter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCharacterSubscription
  extends Promise<AsyncIterator<AggregateCharacter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpellConnection {
  pageInfo: PageInfo;
  edges: SpellEdge[];
}

export interface SpellConnectionPromise
  extends Promise<SpellConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpellEdge>>() => T;
  aggregate: <T = AggregateSpellPromise>() => T;
}

export interface SpellConnectionSubscription
  extends Promise<AsyncIterator<SpellConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpellEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpellSubscription>() => T;
}

export interface SpellEdge {
  node: Spell;
  cursor: String;
}

export interface SpellEdgePromise extends Promise<SpellEdge>, Fragmentable {
  node: <T = SpellPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpellEdgeSubscription
  extends Promise<AsyncIterator<SpellEdge>>,
    Fragmentable {
  node: <T = SpellSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSpell {
  count: Int;
}

export interface AggregateSpellPromise
  extends Promise<AggregateSpell>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpellSubscription
  extends Promise<AsyncIterator<AggregateSpell>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CharacterSubscriptionPayload {
  mutation: MutationType;
  node: Character;
  updatedFields: String[];
  previousValues: CharacterPreviousValues;
}

export interface CharacterSubscriptionPayloadPromise
  extends Promise<CharacterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CharacterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CharacterPreviousValuesPromise>() => T;
}

export interface CharacterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CharacterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CharacterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CharacterPreviousValuesSubscription>() => T;
}

export interface CharacterPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
}

export interface CharacterPreviousValuesPromise
  extends Promise<CharacterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CharacterPreviousValuesSubscription
  extends Promise<AsyncIterator<CharacterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SpellSubscriptionPayload {
  mutation: MutationType;
  node: Spell;
  updatedFields: String[];
  previousValues: SpellPreviousValues;
}

export interface SpellSubscriptionPayloadPromise
  extends Promise<SpellSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpellPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpellPreviousValuesPromise>() => T;
}

export interface SpellSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpellSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpellSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpellPreviousValuesSubscription>() => T;
}

export interface SpellPreviousValues {
  id: ID_Output;
  api5eId: String;
  api5eIndex: String;
  name: String;
  description: String;
  highLevel: String;
  page: String;
  range: String;
  components: String;
  ritual: Boolean;
  concentration: Boolean;
  duration: String;
  castingTime: String;
  material: String;
  level: Int;
  school: String;
  klasses: String;
}

export interface SpellPreviousValuesPromise
  extends Promise<SpellPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  api5eId: () => Promise<String>;
  api5eIndex: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  highLevel: () => Promise<String>;
  page: () => Promise<String>;
  range: () => Promise<String>;
  components: () => Promise<String>;
  ritual: () => Promise<Boolean>;
  concentration: () => Promise<Boolean>;
  duration: () => Promise<String>;
  castingTime: () => Promise<String>;
  material: () => Promise<String>;
  level: () => Promise<Int>;
  school: () => Promise<String>;
  klasses: () => Promise<String>;
}

export interface SpellPreviousValuesSubscription
  extends Promise<AsyncIterator<SpellPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  api5eId: () => Promise<AsyncIterator<String>>;
  api5eIndex: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  highLevel: () => Promise<AsyncIterator<String>>;
  page: () => Promise<AsyncIterator<String>>;
  range: () => Promise<AsyncIterator<String>>;
  components: () => Promise<AsyncIterator<String>>;
  ritual: () => Promise<AsyncIterator<Boolean>>;
  concentration: () => Promise<AsyncIterator<Boolean>>;
  duration: () => Promise<AsyncIterator<String>>;
  castingTime: () => Promise<AsyncIterator<String>>;
  material: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  school: () => Promise<AsyncIterator<String>>;
  klasses: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  username: String;
  password: String;
  avatarUrl?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  avatarUrl: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Character",
    embedded: false
  },
  {
    name: "Spell",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
